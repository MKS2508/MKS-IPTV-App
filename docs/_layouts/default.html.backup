<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="{% if page.excerpt %}{{ page.excerpt | strip_html | strip_newlines | truncate: 160 }}{% else %}{{ site.description }}{% endif %}">
    <title>{{ page.title }} | {{ site.title }}</title>
    <link rel="icon" href="{{ '/assets/favicon/favicon.ico' | relative_url }}" type="image/x-icon">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ '/assets/css/style.css?v=' | append: site.github.build_revision | relative_url }}">
  </head>
  <body>
    
    <header class="sticky-header">
      <div class="container">
        <a href="{{ '/' | absolute_url }}" class="site-title">
          <img src="{{ '/assets/imgs/applogo.webp' | relative_url }}" alt="{{ site.title }} Logo" class="site-logo">
          {{ site.title }}
        </a>
        <button class="nav-toggle" aria-label="toggle navigation">
          <span class="hamburger"></span>
        </button>
        <nav class="nav-menu">
          {% for page in site.header_pages %}
            <a href="{{ page | relative_url | replace: ".md", ".html" }}" class="nav-link">{{ page | replace: ".md", "" | capitalize }}</a>
          {% endfor %}
        </nav>
      </div>
    </header>
    <main>
      <div class="container">
        {{ content }}
      </div>
    </main>
    <a href="#" class="back-to-top">â†‘</a>

    <script>
      // Mobile navigation toggle
      const navToggle = document.querySelector('.nav-toggle');
      const navMenu = document.querySelector('.nav-menu');
      const body = document.body;
      
      navToggle.addEventListener('click', () => {
        navMenu.classList.toggle('active');
        navToggle.classList.toggle('active');
        body.classList.toggle('menu-open');
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!navToggle.contains(e.target) && !navMenu.contains(e.target) && navMenu.classList.contains('active')) {
          navMenu.classList.remove('active');
          navToggle.classList.remove('active');
          body.classList.remove('menu-open');
        }
      });
      
      // Header scroll effect
      const header = document.querySelector('.sticky-header');
      let lastScroll = 0;
      
      window.addEventListener('scroll', () => {
        const currentScroll = window.scrollY;
        
        // Add scrolled class
        if (currentScroll > 50) {
          header.classList.add('scrolled');
        } else {
          header.classList.remove('scrolled');
        }
        
        lastScroll = currentScroll;
      });

      // Back to top button
      const backToTop = document.querySelector('.back-to-top');
      window.addEventListener('scroll', () => {
        if (window.scrollY > 200) {
          backToTop.classList.add('visible');
        } else {
          backToTop.classList.remove('visible');
        }
      });
      
      // Smooth scroll for anchor links
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
          e.preventDefault();
          const target = document.querySelector(this.getAttribute('href'));
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });
      
      // Hero Section Animations
      document.addEventListener('DOMContentLoaded', function() {
        // Typewriter effect
        const typewriter = document.querySelector('.typewriter');
        if (typewriter) {
          const text = typewriter.getAttribute('data-text');
          typewriter.textContent = '';
          let i = 0;
          
          function type() {
            if (i < text.length) {
              typewriter.textContent += text.charAt(i);
              i++;
              setTimeout(type, 50);
            }
          }
          
          setTimeout(type, 500);
        }
        
        // Particle animation
        const particlesContainer = document.getElementById('particles');
        if (particlesContainer) {
          function createParticle() {
            const particle = document.createElement('div');
            particle.className = 'particle';
            particle.style.left = Math.random() * 100 + '%';
            particle.style.animationDelay = Math.random() * 3 + 's';
            particle.style.animationDuration = (Math.random() * 3 + 5) + 's';
            particlesContainer.appendChild(particle);
            
            setTimeout(() => {
              particle.remove();
            }, 8000);
          }
          
          // Create initial particles
          for (let i = 0; i < 30; i++) {
            setTimeout(createParticle, i * 200);
          }
          
          // Continue creating particles
          setInterval(createParticle, 500);
        }
        
        // Fade in animations on scroll
        const observerOptions = {
          threshold: 0.1,
          rootMargin: '0px 0px -50px 0px'
        };
        
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.style.animationPlayState = 'running';
              observer.unobserve(entry.target);
            }
          });
        }, observerOptions);
        
        document.querySelectorAll('.fade-in-up').forEach(el => {
          el.style.animationPlayState = 'paused';
          observer.observe(el);
        });
        
        // Badge float animation delays
        document.querySelectorAll('.badge-float').forEach((badge, index) => {
          badge.style.setProperty('--i', index);
        });
        
        // Carousel functionality
        const carouselTrack = document.getElementById('carouselTrack');
        const carouselPrev = document.getElementById('carouselPrev');
        const carouselNext = document.getElementById('carouselNext');
        const carouselDots = document.querySelectorAll('.dot');
        const slides = document.querySelectorAll('.carousel-slide');
        
        let currentSlide = 0;
        const totalSlides = slides.length;
        
        function updateCarousel() {
          // Move track
          carouselTrack.style.transform = `translateX(-${currentSlide * 100}%)`;
          
          // Update active states
          slides.forEach((slide, index) => {
            slide.classList.toggle('active', index === currentSlide);
          });
          
          carouselDots.forEach((dot, index) => {
            dot.classList.toggle('active', index === currentSlide);
          });
        }
        
        function nextSlide() {
          currentSlide = (currentSlide + 1) % totalSlides;
          updateCarousel();
        }
        
        function prevSlide() {
          currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
          updateCarousel();
        }
        
        function goToSlide(slideIndex) {
          currentSlide = slideIndex;
          updateCarousel();
        }
        
        // Event listeners
        if (carouselNext) {
          carouselNext.addEventListener('click', nextSlide);
        }
        
        if (carouselPrev) {
          carouselPrev.addEventListener('click', prevSlide);
        }
        
        carouselDots.forEach((dot, index) => {
          dot.addEventListener('click', () => goToSlide(index));
        });
        
        // Auto-play carousel
        let autoPlayInterval = setInterval(nextSlide, 5000);
        
        // Pause auto-play on hover
        const carousel = document.querySelector('.screenshot-carousel');
        if (carousel) {
          carousel.addEventListener('mouseenter', () => {
            clearInterval(autoPlayInterval);
          });
          
          carousel.addEventListener('mouseleave', () => {
            autoPlayInterval = setInterval(nextSlide, 5000);
          });
        }
        
        // Keyboard navigation
        document.addEventListener('keydown', (e) => {
          if (e.key === 'ArrowLeft') {
            prevSlide();
          } else if (e.key === 'ArrowRight') {
            nextSlide();
          }
        });
        
        // Enhanced scroll animations
        const scrollElements = document.querySelectorAll('.scroll-reveal');
        const elementInView = (el, dividend = 1) => {
          const elementTop = el.getBoundingClientRect().top;
          return (
            elementTop <=
            (window.innerHeight || document.documentElement.clientHeight) / dividend
          );
        };
        
        const displayScrollElement = (element) => {
          element.classList.add('scrolled');
        };
        
        const handleScrollAnimation = () => {
          scrollElements.forEach((el) => {
            if (elementInView(el, 1.25)) {
              displayScrollElement(el);
            }
          });
        };
        
        window.addEventListener('scroll', () => {
          handleScrollAnimation();
        });
        
        // Parallax effect for hero elements
        const parallaxElements = document.querySelectorAll('[data-parallax]');
        window.addEventListener('scroll', () => {
          const scrolled = window.pageYOffset;
          parallaxElements.forEach(el => {
            const speed = el.dataset.parallax || 0.5;
            const yPos = -(scrolled * speed);
            el.style.transform = `translateY(${yPos}px)`;
          });
        });
        
        // Cursor glow effect
        const cursorGlow = document.createElement('div');
        cursorGlow.className = 'cursor-glow';
        document.body.appendChild(cursorGlow);
        
        document.addEventListener('mousemove', (e) => {
          cursorGlow.style.left = e.pageX + 'px';
          cursorGlow.style.top = e.pageY + 'px';
        });
        
        // Magnetic buttons
        document.querySelectorAll('.btn').forEach(btn => {
          btn.addEventListener('mousemove', function(e) {
            const rect = this.getBoundingClientRect();
            const x = e.clientX - rect.left - rect.width / 2;
            const y = e.clientY - rect.top - rect.height / 2;
            
            this.style.transform = `translate(${x * 0.15}px, ${y * 0.15}px)`;
          });
          
          btn.addEventListener('mouseleave', function() {
            this.style.transform = '';
          });
        });
      });
    </script>

    <!-- Enhanced Lightbox -->
    <div id="lightbox" class="lightbox">
      <span class="lightbox-close"></span>
      <div class="lightbox-content">
        <img src="" alt="">
      </div>
      <button class="lightbox-nav prev" aria-label="Previous image">â€¹</button>
      <button class="lightbox-nav next" aria-label="Next image">â€º</button>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Enhanced Lightbox functionality
        const gallery = document.querySelector('.screenshot-gallery');
        const lightbox = document.getElementById('lightbox');
        const lightboxImg = lightbox.querySelector('.lightbox-content img');
        const closeBtn = lightbox.querySelector('.lightbox-close');
        const prevBtn = lightbox.querySelector('.lightbox-nav.prev');
        const nextBtn = lightbox.querySelector('.lightbox-nav.next');
        
        let currentImages = [];
        let currentIndex = 0;
        
        if (gallery) {
          // Collect all images in the gallery
          const images = gallery.querySelectorAll('img');
          images.forEach((img, index) => {
            currentImages.push({
              src: img.src,
              alt: img.alt
            });
            
            // Make the figure clickable
            const figure = img.closest('figure');
            if (figure) {
              figure.addEventListener('click', function(e) {
                e.preventDefault();
                currentIndex = index;
                openLightbox();
              });
            }
          });
        }
        
        function openLightbox() {
          if (currentImages.length > 0) {
            updateLightboxImage();
            lightbox.classList.add('active');
            document.body.style.overflow = 'hidden';
          }
        }
        
        function closeLightbox() {
          lightbox.classList.remove('active');
          document.body.style.overflow = '';
        }
        
        function updateLightboxImage() {
          const image = currentImages[currentIndex];
          lightboxImg.src = image.src;
          lightboxImg.alt = image.alt;
          
          // Update navigation buttons visibility
          prevBtn.style.display = currentIndex > 0 ? 'flex' : 'none';
          nextBtn.style.display = currentIndex < currentImages.length - 1 ? 'flex' : 'none';
        }
        
        function navigateImage(direction) {
          if (direction === 'prev' && currentIndex > 0) {
            currentIndex--;
          } else if (direction === 'next' && currentIndex < currentImages.length - 1) {
            currentIndex++;
          }
          updateLightboxImage();
        }
        
        // Event listeners
        if (closeBtn) {
          closeBtn.addEventListener('click', closeLightbox);
        }
        
        if (prevBtn) {
          prevBtn.addEventListener('click', () => navigateImage('prev'));
        }
        
        if (nextBtn) {
          nextBtn.addEventListener('click', () => navigateImage('next'));
        }
        
        // Close on background click
        lightbox.addEventListener('click', function(e) {
          if (e.target === lightbox || e.target.classList.contains('lightbox-content')) {
            closeLightbox();
          }
        });
        
        // Keyboard navigation
        document.addEventListener('keydown', function(e) {
          if (lightbox.classList.contains('active')) {
            if (e.key === 'Escape') closeLightbox();
            if (e.key === 'ArrowLeft') navigateImage('prev');
            if (e.key === 'ArrowRight') navigateImage('next');
          }
        });
        
        // Intersection Observer for lazy loading
        if ('IntersectionObserver' in window && gallery) {
          const imageObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const img = entry.target;
                if (img.dataset.src) {
                  img.src = img.dataset.src;
                  img.removeAttribute('data-src');
                  observer.unobserve(img);
                }
              }
            });
          }, {
            rootMargin: '50px 0px',
            threshold: 0.01
          });
          
          gallery.querySelectorAll('img[data-src]').forEach(img => {
            imageObserver.observe(img);
          });
        }
      });
    </script>
  </body>
</html>